COMENTÁRIOS
	Qualquer texto entre // e o final de uma linha é tratado como comentário e é ignorado por JavaScript.
	Qualquer texto entre os caracteres /* e */ também é tratado como comentário. Esses comentários podem abranger várias linhas, mas não podem ser aninhados.



ARITMÉTICA
 - Math.pow(2,53) - Potenciação, 2 elevado à potencia 53.
 - Math.round(.6) - 1.0, arredonda para o inteiro mais próximo.
 - Math.ceil(.6) - 1.0, arredonda para cima para um inteiro.
 - Math.floor(.6) - 0.0, arredonda para baixo para um inteiro.
 - Math.abs(-5) - 5, valor absoluto.
 - Math.max(x,y,z) - Retorna o maior argumento.
 - Math.min(x,y,z) - Retorna o menor argumento.
 - Math.random() - Número pseudoaleatório x, em que 0 <= x < 1.
 - Math.PI - π, circunferência de um circulo, diâmetro.
 - Math.E - e, a base do logaritmo natural.
 - Math.sqrt(3) - Radiciação, a raiz quadrada de 3.
 - Math.sin(0) - Trigonometria. Também Math.cos, Math.atan, etc.
 - Math.log(10) - Logaritmo natural de 10.
 - Math.log(100)/Math.LN10 - Logaritmo de base 10 de 100
 - Math.exp(3) - Math.E ao cubo.




DATAS E HORAS
  var later = new Date(2010, 0, 1, 17, 10, 30);
	- later.getFullYear() - 2010.
	- later.getMonth() - 0.
	- later.getDate() - 1.
	- later.getDay() - 5, dia da semana. 0 é domingo, 5 é sexta-feira.
	- later.getHours() - 17, 5 da tarde.
	- later.getUTCHours() - Horas em UTC, depende do fuso horário.
	- later.toString() - "Sexta-feira, 01 de janeiro de 2010m 17:10:30 GMT-0800 (PST).
	- later.toUTCString() - "Sábado, 02 de janeiro de 2010, 01:10:30 GTM"
	- later.toLocaleDateString() - "01/01/2010"
	- later.toLocaleTimeString() - "05:10:30 PM"
	- later.toISOString() - "2010-01-02T01:10:30.000Z", somente ES5.



TEXTO
 - Sequências de escape em strings literais.
	\0 - O caractere NUL (\u0000)
	\b - Retrocesso (\u0008)
	\t - Tabulação horizontal (\u0009)
	\n - Nova linha (\u000A)
	\v - Tabulação vertical (\u000B)
	\f - Avanço de página (\u000C)
	\r - Retorno de carro (\u000D)
	\" - Aspas duplas (\u0022)
	\' - Apóstrofo ou aspas simples (\u0027)
	\\ - Barra invertida (\u005C)
	\x - XX O caractere Latin-1 especificado pelos dois dígitos hexadecimais XX
	\u - XXXX O caractere Unicode especificado pelos quatro dígitos hexadecimais XXXX

 - Trabalhando com strings
	var s = "hello, world" - Começa com um texto.
	s.charAt(0) - "h": o primeiro caractere.
	s.charAt(s.length-1) - "d": o último caractere.
	s.substring(1,4) - "ell": o 2º, 3º e 4º caracteres.
	s.slice(1,4) - "ell": a mesma coisa.
	s.slice(-3) - "rld": os últimos 3 caracteres.
	s.indexOf("l") - 2: posição da primeira letra l.
	s.lastIndexOf("l") - 10: posição da última letra l.
	s.indexOf("l", 3) - 3: posição do primeiro "l" em ou após 3.
	s.split(", ") - ["hello", "world"] divide em substrings.
	s.replace("h", "H") - "Hello, world": substitui todas as instâncias.
	s.toUpperCase() - "HELLO, WORLD".
  Em ECMAScript 5, as strings podem ser tratadas como arrays somente para leitura e é possível acessar
caracteres individuais (valores de 16 bits) de uma string usando colchetes em lugar do método
charAt():
	s = "hello, world";
	s[0] - "h"
	s[s.length-1] - "d"




OPERADORES BOOLEANOS
 - O operador && executa a operação booleana E.
	Ele é avaliado como um valor verdadeiro se, e somente
se, seus dois operandos são verdadeiros; caso contrário, é avaliado como um valor falso.
 - O operador || é a operação booleana OU.
	Ele é avaliado como um valor verdadeiro se um ou outro (ou ambos) de seus operandos for verdadeiro e é avaliado como um valor falso se os dois operandos forem falsos.
 - O operador unário ! executa a operação booleana NÃO.
	Ele é avaliado como true se seu operando é falso e é avaliado como false se seu operando é verdadeiro.







EXPRESSÕES e OPERADORES
Uma expressão é uma frase de código JavaScript que um interpretador JavaScript pode avaliar para produzir um valor.
Uma constante literalmente incorporada em seu programa é um tipo de expressão muito simples. Um nome de variável também é uma expressão simples, avaliada com o valor atribuído a essa variável. Expressões complexas são formadas a partir de expressões mais simples.
 
 - Expressões Primárias
	Em JavaScript, as expressões primárias são valores constantes ou literais, certas palavras-chave da linguagem e referências a variáveis.

Algumas das palavras reservadas de JavaScript são expressões primárias:
	true  // É avaliado como o valor booleano true.
	false // É avaliado como o valor booleano false.
	null  // É avaliado como o valor null.
	this  // É avaliado como o objeto "atual".

Por fim, o terceiro tipo de expressão primária é a referência à variável simples:
	i 	  // É avaliada como o valor da variável i.
	sum 	  // É avaliada como o valor da variável sum.
	undefined // undefined é uma variável global e não uma palavra-chave como null.

 - Inicializadores de objetos e array
    A) Arrays
	Os inicializadores de objeto e array são expressões cujo valor é um objeto ou array recém-criado. Contudo,
ao contrário dos verdadeiros literais, elas não são expressões primárias, pois incluem várias subexpressões
que especificam valores de propriedade e elemento. 
	Um inicializador de array é uma lista de expressões separadas com vírgulas e contidas em colchetes.
		[] 	   // Um array vazio: nenhuma expressão dentro dos colchetes significa nenhum
		   	   // elemento
		[1+2,3+4]  // Um array de 2 elementos. O primeiro elemento é 3, o segundo é 7

	As expressões de elemento em um inicializador de array podem ser elas próprias inicializadoras de
array, ou seja, essas expressões podem criar arrays aninhados:
		var matrix = [[1,2,3], [4,5,6], [7,8,9]];

	Elementos indefinidos podem ser incluídos em um array literal simplesmente omitindo-se um valor
entre vírgulas. Por exemplo, o array a seguir contém cinco elementos, incluindo três indefinidos:
		var sparseArray = [1,,,,5];

    B)Objetos
	As expressões inicializadoras de objeto são como as expressões inicializadoras de array, mas os colchetes
são substituídos por chaves e cada subexpressão é prefixada com um nome de propriedade e dois-pontos:
	var p = { x:2.3, y:-1.2 };     // Um objeto com 2 propriedades
	var q = {}; 		       // Um objeto vazio sem propriedades
	q.x = 2.3; q.y = -1.2;         // Agora q tem as mesmas propriedades de p

	Objetos literais podem ser aninhados. Por exemplo:
		var rectangle = { upperLeft: { x: 2, y: 2 },
				  lowerRight: { x: 4, y: 5 } };

 - Expressões de definição de função
	Uma expressão de definição de função define uma função JavaScript e o valor de tal expressão é a
função recém-definida. Normalmente, uma expressão de definição de função consiste na palavra-chave function seguida de uma lista separada com vírgulas de zero ou mais identificadores (os nomes de parâmetro) entre parênteses e um bloco
de código JavaScript (o corpo da função) entre chaves. Por exemplo:
		// Esta função retorna o quadrado do valor passado a ela.
		var square = function(x) { return x * x; }

 - Expressões de acesso à propriedade
	Uma expressão de acesso à propriedade é avaliada com o valor de uma propriedade de objeto ou de
um elemento de array. JavaScript define duas sintaxes para acesso à propriedade:
		expressão . identificador
		expressão [ expressão ]
	O primeiro estilo de acesso à propriedade é uma expressão seguida de um ponto-final e um identificador.
A expressão especifica o objeto e o identificador especifica o nome da propriedade desejada.
	O segundo estilo de acesso à propriedade tem outra expressão entre colchetes após a primeira (o objeto ou array). Essa segunda expressão especifica o nome da propriedade desejada ou o índice do elemento do array desejado. Aqui estão alguns exemplos concretos:
		var o = {x:1,y:{z:3}};  // Um exemplo de objeto
		var a = [o,4,[5,6]];    // Um exemplo de array que contém o objeto
		o.x 			// => 1: propriedade x da expressão o
		o.y.z 			// => 3: propriedade z da expressão o.y
		o["x"] 			// => 1: propriedade x do objeto o
		a[1] 			// => 4: elemento no índice 1 da expressão a
		a[2]["1"]	 	// => 6: elemento no índice 1 da expressão a[2]
		a[0].x 			// => 1: propriedade x da expressão a[0]

 - Expressões de invocação
	Uma expressão de invocação é uma sintaxe de JavaScript para chamar (ou executar) uma função ou um método. Ela começa com uma expressão de função que identifica a função a ser chamada. A expressão de função é seguida por um parêntese de abertura, uma lista separada com vírgulas de zero ou mais expressões de argumento e um parêntese de fechamento. Alguns exemplos:
		f(0) // f é a expressão de função; 0 é a expressão de argumento.
		Math.max(x,y,z) // Math.max é a função; x, y e z são os argumentos.
		a.sort() // a.sort é a função; não há argumentos.
	Se a função utiliza uma instrução return para retornar um valor, então esse valor se torna o valor da expressão de invocação.
	Toda expressão de invocação contém um par de parênteses e uma expressão antes do parêntese de
abertura. Se essa expressão é uma expressão de acesso à propriedade, então a chamada é conhecida
como invocação de método.

 - Expressões de criação de objeto
	Uma expressão de criação de objeto gera um novo objeto e chama uma função (denominada construtora)
para inicializar as propriedades desse objeto. As expressões de criação de objeto são como as expressões de chamada, exceto que são prefixadas com a palavra-chave new:
		new Object()
		new Point(2,3)
	Se nenhum argumento é passado para a função construtora em uma expressão de criação de objeto, o par de parênteses vazio pode ser omitido:
		new Object
		new Date

 






Instrução de Declaração
 - var
A instrução var declara uma (ou mais) variável. A palavra-chave var é seguida por uma lista separada com vírgulas de variáveis a declarar; opcionalmente, cada variável da lista pode ter uma expressão inicializadora especificando seu valor inicial.
Por exemplo:
	var i; 						// Uma variável simples
	var j = 0; 					// Uma var, um valor
	var p, q;					// Duas variáveis
	var greeting = "hello" + name;  	   	// Um inicializador complexo
	var x = 2.34, y = Math.cos(0.75), r, theta; 	// Muitas variáveis
	var x = 2, y = x*x; 				// A segunda variável usa a primeira
	var x = 2, 					// Diversas variáveis...
		f = function(x) { return x*x }, 	// cada uma em sua própria linha
		y = f(x);





 - const
Pode-se usar a palavra-chave const para definir constantes. As constantes são como as variáveis, exceto que as atribuições a elas são ignoradas (a tentativa de alterar uma constante não causa erro) e as tentativas de redeclará-las causam erros:
	const pi = 3.14; 	// Define uma constante e fornece a ela um valor.
	pi = 4; 		// Qualquer atribuição futura a ela é ignorada silenciosamente.
	const pi = 4; 		// É erro redeclarar uma constante.
	var pi = 4; 		// Isto também é erro.



 - let
A forma mais simples de usar let é como uma substituta informal para var. As variáveis declaradas
com var são definidas por toda a função circundante. As variáveis declaradas com let são definidas
somente dentro do bloco circundante mais próximo (e qualquer bloco aninhado dentro dele, é claro).
Se você declara uma variável com let dentro do corpo de um laço, por exemplo, ela não existe
fora do laço: 
	function oddsums(n) {
		let total = 0, result=[]; 	// Definida por toda a função
		for(let x = 1; x <= n; x++) { 	// x é definida apenas no laço
			let odd = 2*x-1; 	// odd definida apenas neste laço
			total += odd;
			result.push(total);
		}
		// Usar x ou odd aqui causaria um ReferenceError
		return result;
	}
	oddsums(5); // Retorna [1,4,9,16,25]